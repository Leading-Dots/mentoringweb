type Category @model @auth(rules: [{allow: public}]) {
  id: ID!
  value: String
}

type Review @model @auth(rules: [{allow: public}]) {
  id: ID!
  rating: String
  comment: String
  reviewerRole: String
  reviewerID: String
  reviewedID: String
  sessionID: ID! @index(name: "bySession")
}

type ChatRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  mentorID: ID! @index(name: "byMentor")
  menteeID: ID! @index(name: "byMentee")
  Messages: [Messages] @hasMany(indexName: "byChatRoom", fields: ["id"])
  name: String
}

enum SessionRequestStatus {
  SENT
  ACCEPTED
  REJECTED
}

type SessionRequest @model @auth(rules: [{allow: public}]) {
  id: ID!
  proposedCost: String
  mentorNote: String
  menteeNote: String
  duration: Int
  proposedSessionTime: AWSDateTime
  mentorID: ID! @index(name: "byMentor")
  menteeID: ID! @index(name: "byMentee")
  status: SessionRequestStatus
  initiatedBy: String
  sessionID: String
  sessionTitle: String
}

enum ProfileStatus {
  PENDING
  PUBLISHED
  REJECTED
  INPROGRESS
}

enum Status {
  SCHEDULED
  RESCHEDULED
  COMPLETED
  CANCELLED
}

type Messages @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  username: String
  userRole: String
  chatroomID: ID! @index(name: "byChatRoom")
  senderId: String!
  timestamp: AWSDateTime
  imageUrl: AWSURL
}

type Notification @model @auth(rules: [{allow: public}]) {
  id: ID!
  mentorID: ID @index(name: "byMentor")
  menteeID: ID @index(name: "byMentee")
  title: String
  body: String
  type: String
  fcmToken: String
  isSent: Boolean
  isRead: Boolean
}

type Session @model @auth(rules: [{allow: public}]) {
  id: ID!
  duration: Int
  status: Status
  sessionDate: AWSDateTime
  menteeID: ID! @index(name: "byMentee")
  mentorID: ID! @index(name: "byMentor")
  cost: String
  meetingLink: String
  sessionRequestID: String!
  sessionTitle: String
  objectives: [String]
  Reviews: [Review] @hasMany(indexName: "bySession", fields: ["id"])
}

type Mentor @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  email: String
  bio: String
  profilePictureUrl: String
  firebaseToken: String
  expertise: [String]
  yearsOfExperience: Int
  hourlyRate: Float
  Sessions: [Session] @hasMany(indexName: "byMentor", fields: ["id"])
  Notifications: [Notification] @hasMany(indexName: "byMentor", fields: ["id"])
  profileStatus: ProfileStatus
  mentorId: String
  SessionRequests: [SessionRequest] @hasMany(indexName: "byMentor", fields: ["id"])
  ChatRooms: [ChatRoom] @hasMany(indexName: "byMentor", fields: ["id"])
  summary: String
  linkedInUrl: String
  websiteUrl: String
}

type Mentee @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String
  lastName: String
  email: String
  bio: String
  profilePictureUrl: String
  firebaseToken: String
  goals: [String]
  preferredMentorExperience: Int
  Sessions: [Session] @hasMany(indexName: "byMentee", fields: ["id"])
  Notifications: [Notification] @hasMany(indexName: "byMentee", fields: ["id"])
  profileStatus: ProfileStatus
  menteeId: String
  SessionRequests: [SessionRequest] @hasMany(indexName: "byMentee", fields: ["id"])
  ChatRooms: [ChatRoom] @hasMany(indexName: "byMentee", fields: ["id"])
  summary: String
  linkedInUrl: AWSURL
  websiteUrl: AWSURL
  resumeUrl: String
  topics: [String]
}
 